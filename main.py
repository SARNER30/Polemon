import os
import random
import sqlite3
import asyncio
import json
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from keep_alive import keep_alive

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–∫–µ–º–æ–Ω–∞—Ö –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ —Ñ–∞–π–ª–∞
with open('pokemons.json', 'r') as f:
    POKEMONS = json.load(f)

TOKEN = os.getenv('TELEGRAM_TOKEN')
ADMIN_IDS = [5953677116]
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode='HTML'))
dp = Dispatcher()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('pokemon.db', check_same_thread=False)
cursor = conn.cursor()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
cursor.executescript('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    balance INTEGER DEFAULT 3000,
    pokeballs INTEGER DEFAULT 5,
    total_pokemons INTEGER DEFAULT 0,
    is_admin BOOLEAN DEFAULT FALSE,
    trainer_id INTEGER DEFAULT NULL,
    trainer_level INTEGER DEFAULT 1
);

CREATE TABLE IF NOT EXISTS pokemons (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    owner_id INTEGER,
    pokemon_id INTEGER,
    name TEXT,
    image TEXT,
    hp INTEGER,
    attack INTEGER,
    defense INTEGER,
    is_custom BOOLEAN DEFAULT FALSE,
    FOREIGN KEY(owner_id) REFERENCES users(user_id)
);

CREATE TABLE IF NOT EXISTS pokemon_counts (
    user_id INTEGER,
    pokemon_id INTEGER,
    count INTEGER DEFAULT 0,
    PRIMARY KEY (user_id, pokemon_id)
);

CREATE TABLE IF NOT EXISTS custom_pokemons (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT UNIQUE,
    image TEXT,
    hp INTEGER,
    attack INTEGER,
    defense INTEGER
);

CREATE TABLE IF NOT EXISTS trainers (
    id INTEGER PRIMARY KEY,
    name TEXT,
    price INTEGER,
    income INTEGER,
    image TEXT
);

CREATE TABLE IF NOT EXISTS pokedex (
    user_id INTEGER,
    pokemon_id INTEGER,
    seen BOOLEAN DEFAULT FALSE,
    caught BOOLEAN DEFAULT FALSE,
    PRIMARY KEY (user_id, pokemon_id)
);
''')

# –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç—Ä–µ–Ω–µ—Ä–æ–≤
if not cursor.execute("SELECT COUNT(*) FROM trainers").fetchone()[0]:
    cursor.executemany(
        "INSERT INTO trainers VALUES (?, ?, ?, ?, ?)",
        [
            (1, "–ë—Ä–æ–∫", 10000, 100, "https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/trainer/1.png"),
            (2, "–ú—Å—Ç–∏", 25000, 250, "https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/trainer/2.png"),
            (3, "–≠—à", 50000, 500, "https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/trainer/3.png")
        ]
    )
    conn.commit()

# –ú–µ–Ω—é
def get_main_menu(user_id):
    buttons = [
        [KeyboardButton(text="üé£ –õ–æ–≤–∏—Ç—å –ø–æ–∫–µ–º–æ–Ω–∞")],
        [KeyboardButton(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton(text="üì¶ –ú–æ–∏ –ø–æ–∫–µ–º–æ–Ω—ã")],
        [KeyboardButton(text="üõí –ú–∞–≥–∞–∑–∏–Ω")],
        [KeyboardButton(text="üìò –ü–æ–∫–µ–¥–µ–∫—Å")]
    ]
    if user_id in ADMIN_IDS:
        buttons.append([KeyboardButton(text="üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")])
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_admin_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –ø–æ–∫–µ–º–æ–Ω–∞")],
            [KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")],
            [KeyboardButton(text="–ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

def get_shop_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üé£ –ö—É–ø–∏—Ç—å –ø–æ–∫–µ–±–∞–ª (500)")],
            [KeyboardButton(text="üë®‚Äçüè´ –ù–∞–Ω—è—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class CreatePokemonState(StatesGroup):
    name = State()
    image = State()
    hp = State()
    attack = State()
    defense = State()

class ChangeBalanceState(StatesGroup):
    user_id = State()
    amount = State()

# ========== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ==========
@dp.message(Command("start"))
async def cmd_start(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    
    cursor.execute("INSERT OR IGNORE INTO users (user_id, username, is_admin) VALUES (?, ?, ?)", 
                  (user_id, username, user_id in ADMIN_IDS))
    conn.commit()
    
    await message.answer(f"üê≤ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –ü–æ–∫–µ–º–æ–Ω–æ–≤, {username}!", reply_markup=get_main_menu(user_id))

@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
@dp.message(F.text == "–ù–∞–∑–∞–¥")
async def back_handler(message: Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu(message.from_user.id))

# ========== –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ ==========
@dp.message(F.text == "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: Message):
    if message.from_user.id in ADMIN_IDS:
        await message.answer("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_menu())

@dp.message(F.text == "–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
async def change_balance_start(message: Message, state: FSMContext):
    if message.from_user.id in ADMIN_IDS:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        await state.set_state(ChangeBalanceState.user_id)

@dp.message(ChangeBalanceState.user_id)
async def process_user_id(message: Message, state: FSMContext):
    try:
        await state.update_data(user_id=int(message.text))
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ (–º–æ–∂–Ω–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é):")
        await state.set_state(ChangeBalanceState.amount)
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")

@dp.message(ChangeBalanceState.amount)
async def process_amount(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        cursor.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", 
                       (int(message.text), data['user_id']))
        conn.commit()
        
        if cursor.rowcount:
            await message.answer(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {data['user_id']} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {message.text} –º–æ–Ω–µ—Ç")
        else:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞!")
    await state.clear()

# ========== –õ–û–í–õ–Ø –ü–û–ö–ï–ú–û–ù–û–í ==========
@dp.message(F.text == "üé£ –õ–æ–≤–∏—Ç—å –ø–æ–∫–µ–º–æ–Ω–∞")
async def catch_pokemon(message: Message):
    user_id = message.from_user.id
    if cursor.execute("SELECT pokeballs FROM users WHERE user_id = ?", (user_id,)).fetchone()[0] <= 0:
        return await message.answer("‚ùå –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–∫–µ–±–∞–ª—ã! –ö—É–ø–∏—Ç–µ –∏—Ö –≤ –º–∞–≥–∞–∑–∏–Ω–µ.")
    
    league = min(cursor.execute("SELECT trainer_level FROM users WHERE user_id = ?", (user_id,)).fetchone()[0], len(POKEMONS))
    pokemon = random.choice(POKEMONS[str(league)])
    
    cursor.execute("UPDATE users SET pokeballs = pokeballs - 1 WHERE user_id = ?", (user_id,))
    cursor.execute("INSERT OR IGNORE INTO pokedex (user_id, pokemon_id) VALUES (?, ?)", (user_id, pokemon['id']))
    cursor.execute("UPDATE pokedex SET seen = TRUE WHERE user_id = ? AND pokemon_id = ?", (user_id, pokemon['id']))
    conn.commit()
    
    await message.answer_photo(
        photo=pokemon['image'],
        caption=f"–í—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ –¥–∏–∫–æ–≥–æ {pokemon['name']}!\nHP: {pokemon['hp']} | ATK: {pokemon['attack']} | DEF: {pokemon['defense']}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–π–º–∞—Ç—å!", callback_data=f"catch_{pokemon['id']}")],
            [InlineKeyboardButton(text="–£–±–µ–∂–∞—Ç—å", callback_data="run_away")]
        ])
    )

@dp.callback_query(F.data.startswith("catch_"))
async def catch_pokemon_callback(callback: CallbackQuery):
    pokemon_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id
    
    pokemon = next((p for league in POKEMONS.values() for p in league if p['id'] == pokemon_id), None)
    if not pokemon:
        return await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–∫–µ–º–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    count = cursor.execute("SELECT count FROM pokemon_counts WHERE user_id = ? AND pokemon_id = ?", 
                         (user_id, pokemon_id)).fetchone()
    if count and count[0] >= 3:
        await callback.message.edit_caption(f"‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å 3 {pokemon['name']}! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ.")
        return await callback.answer()
    
    if random.randint(1, 100) <= min(90, max(10, 100 - pokemon['hp'])):
        cursor.executescript(f"""
            INSERT INTO pokemons (owner_id, pokemon_id, name, image, hp, attack, defense)
            VALUES ({user_id}, {pokemon_id}, '{pokemon['name']}', '{pokemon['image']}', {pokemon['hp']}, {pokemon['attack']}, {pokemon['defense']});
            
            INSERT OR IGNORE INTO pokemon_counts (user_id, pokemon_id, count) 
            VALUES ({user_id}, {pokemon_id}, 0);
            
            UPDATE pokemon_counts SET count = count + 1 
            WHERE user_id = {user_id} AND pokemon_id = {pokemon_id};
            
            UPDATE users SET total_pokemons = total_pokemons + 1 WHERE user_id = {user_id};
            
            UPDATE pokedex SET caught = TRUE WHERE user_id = {user_id} AND pokemon_id = {pokemon_id};
        """)
        conn.commit()
        await callback.message.edit_caption(f"üéâ –í—ã –ø–æ–π–º–∞–ª–∏ {pokemon['name']}!")
    else:
        await callback.message.edit_caption(f"‚ùå {pokemon['name']} —Å–±–µ–∂–∞–ª! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    await callback.answer()

@dp.callback_query(F.data == "run_away")
async def run_away_callback(callback: CallbackQuery):
    await callback.message.edit_caption("–í—ã —É–±–µ–∂–∞–ª–∏ –æ—Ç –ø–æ–∫–µ–º–æ–Ω–∞!")
    await callback.answer()

# ========== –ú–ê–ì–ê–ó–ò–ù ==========
@dp.message(F.text == "üõí –ú–∞–≥–∞–∑–∏–Ω")
async def shop_handler(message: Message):
    await message.answer("üõí –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω!", reply_markup=get_shop_menu())

@dp.message(F.text == "üé£ –ö—É–ø–∏—Ç—å –ø–æ–∫–µ–±–∞–ª (500)")
async def buy_pokeball(message: Message):
    user_id = message.from_user.id
    if cursor.execute("UPDATE users SET balance = balance - 500, pokeballs = pokeballs + 1 WHERE user_id = ? AND balance >= 500", 
                     (user_id,)).rowcount:
        conn.commit()
        await message.answer("üé£ –í—ã –∫—É–ø–∏–ª–∏ 1 –ø–æ–∫–µ–±–∞–ª!")
    else:
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!")
    await message.answer("üõí –ú–∞–≥–∞–∑–∏–Ω:", reply_markup=get_shop_menu())

@dp.message(F.text == "üë®‚Äçüè´ –ù–∞–Ω—è—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞")
async def hire_trainer_menu(message: Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–µ—Ä–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text=f"{trainer[1]} - {trainer[2]} –º–æ–Ω–µ—Ç (+{trainer[3]}/—á–∞—Å)",
                callback_data=f"hire_{trainer[0]}"
            )] for trainer in cursor.execute("SELECT * FROM trainers").fetchall()
        ]))
    )

@dp.callback_query(F.data.startswith("hire_"))
async def hire_trainer(callback: CallbackQuery):
    trainer_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id
    trainer = cursor.execute("SELECT * FROM trainers WHERE id = ?", (trainer_id,)).fetchone()
    
    if trainer and cursor.execute("""
        UPDATE users SET balance = balance - ?, trainer_id = ?, trainer_level = trainer_level + 1 
        WHERE user_id = ? AND balance >= ?
    """, (trainer[2], trainer_id, user_id, trainer[2])).rowcount:
        conn.commit()
        await callback.message.answer(f"üë®‚Äçüè´ –í—ã –Ω–∞–Ω—è–ª–∏ —Ç—Ä–µ–Ω–µ—Ä–∞ {trainer[1]}! –í–∞—à —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–Ω–µ—Ä–∞ —É–≤–µ–ª–∏—á–µ–Ω.")
    else:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!")
    await callback.answer()

# ========== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ==========
@dp.message(F.text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def stats_handler(message: Message):
    user_id = message.from_user.id
    data = cursor.execute("""
        SELECT username, balance, pokeballs, total_pokemons, trainer_level
        FROM users WHERE user_id = ?
    """, (user_id,)).fetchone()
    
    if data:
        trainer = cursor.execute("""
            SELECT t.name, t.income FROM users u
            JOIN trainers t ON u.trainer_id = t.id
            WHERE u.user_id = ?
        """, (user_id,)).fetchone()
        
        unique_pokemons = cursor.execute(
            "SELECT COUNT(DISTINCT pokemon_id) FROM pokemons WHERE owner_id = ?", 
            (user_id,)).fetchone()[0]
        
        await message.answer(
            f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"üë§ –ò–º—è: {data[0]}\nüí∞ –ú–æ–Ω–µ—Ç—ã: {data[1]}\n"
            f"üé£ –ü–æ–∫–µ–±–∞–ª—ã: {data[2]}\nüê≤ –í—Å–µ–≥–æ –ø–æ–∫–µ–º–æ–Ω–æ–≤: {data[3]}\n"
            f"üîÑ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–∫–µ–º–æ–Ω–æ–≤: {unique_pokemons}\n"
            f"üèÖ –£—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–Ω–µ—Ä–∞: {data[4]}" +
            (f"\nüë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä: {trainer[0]} (+{trainer[1]} –º–æ–Ω–µ—Ç/—á–∞—Å)" if trainer else "")
        )

# ========== –ú–û–ò –ü–û–ö–ï–ú–û–ù–´ ==========
@dp.message(F.text == "üì¶ –ú–æ–∏ –ø–æ–∫–µ–º–æ–Ω—ã")
async def my_pokemons_handler(message: Message):
    pokemons = cursor.execute("""
        SELECT p.pokemon_id, p.name, p.image, pc.count 
        FROM pokemon_counts pc
        JOIN (SELECT DISTINCT pokemon_id, name, image FROM pokemons WHERE owner_id = ?) p
        ON pc.pokemon_id = p.pokemon_id
        WHERE pc.user_id = ?
        ORDER BY pc.count DESC, p.name
    """, (message.from_user.id, message.from_user.id)).fetchall()
    
    if pokemons:
        await message.answer(
            "üì¶ –í–∞—à–∏ –ø–æ–∫–µ–º–æ–Ω—ã:\n\n" +
            "\n".join(f"{name} √ó{count}" for _, name, _, count in pokemons)
        )
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∫–µ–º–æ–Ω–æ–≤!")

# ========== –ü–û–ö–ï–î–ï–ö–° ==========
@dp.message(F.text == "üìò –ü–æ–∫–µ–¥–µ–∫—Å")
async def pokedex_handler(message: Message):
    user_id = message.from_user.id
    current_league = min(cursor.execute(
        "SELECT trainer_level FROM users WHERE user_id = ?", 
        (user_id,)).fetchone()[0], len(POKEMONS))
    
    caught, seen = cursor.execute(
        "SELECT SUM(caught), SUM(seen) FROM pokedex WHERE user_id = ?", 
        (user_id,)).fetchone()
    
    total_in_leagues = sum(len(POKEMONS.get(str(league), [])) for league in range(1, current_league + 1))
    
    await message.answer(
        f"üìò –í–∞—à –ü–æ–∫–µ–¥–µ–∫—Å:\n‚úÖ –ü–æ–π–º–∞–Ω–æ: {caught or 0}\n"
        f"üëÄ –í–∏–¥–µ–ª–∏: {seen or 0}\nüèÜ –î–æ—Å—Ç—É–ø–Ω–æ –ø–æ–∫–µ–º–æ–Ω–æ–≤: {total_in_leagues}\n"
        f"üîç –ü—Ä–æ–≥—Ä–µ—Å—Å: {round((caught or 0)/total_in_leagues*100, 1) if total_in_leagues else 0}%"
    )

# ========== –°–û–ó–î–ê–ù–ò–ï –ü–û–ö–ï–ú–û–ù–û–í (–ê–î–ú–ò–ù) ==========
@dp.message(F.text == "–°–æ–∑–¥–∞—Ç—å –ø–æ–∫–µ–º–æ–Ω–∞")
async def create_pokemon_start(message: Message, state: FSMContext):
    if message.from_user.id in ADMIN_IDS:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–∫–µ–º–æ–Ω–∞:")
        await state.set_state(CreatePokemonState.name)

@dp.message(CreatePokemonState.name)
async def create_pokemon_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–∫–µ–º–æ–Ω–∞:")
    await state.set_state(CreatePokemonState.image)

@dp.message(CreatePokemonState.image)
async def create_pokemon_image(message: Message, state: FSMContext):
    await state.update_data(image=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ HP –ø–æ–∫–µ–º–æ–Ω–∞:")
    await state.set_state(CreatePokemonState.hp)

@dp.message(CreatePokemonState.hp)
async def create_pokemon_hp(message: Message, state: FSMContext):
    try:
        await state.update_data(hp=int(message.text))
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞—Ç–∞–∫—É –ø–æ–∫–µ–º–æ–Ω–∞:")
        await state.set_state(CreatePokemonState.attack)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

@dp.message(CreatePokemonState.attack)
async def create_pokemon_attack(message: Message, state: FSMContext):
    try:
        await state.update_data(attack=int(message.text))
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞—â–∏—Ç—É –ø–æ–∫–µ–º–æ–Ω–∞:")
        await state.set_state(CreatePokemonState.defense)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

@dp.message(CreatePokemonState.defense)
async def create_pokemon_defense(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        cursor.execute("""
            INSERT INTO custom_pokemons (name, image, hp, attack, defense)
            VALUES (?, ?, ?, ?, ?)
        """, (data['name'], data['image'], data['hp'], data['attack'], int(message.text)))
        conn.commit()
        await message.answer(f"‚úÖ –ü–æ–∫–µ–º–æ–Ω {data['name']} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    except sqlite3.IntegrityError:
        await message.answer("‚ùå –ü–æ–∫–µ–º–æ–Ω —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
    await state.clear()

# ========== –ó–ê–ü–£–°–ö ==========
async def main():
    keep_alive()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
