from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from config import ADMIN_ID  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –≤–∞—à–µ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞
from database import add_pokemon_to_user, give_user_coins, get_user_by_username
from keyboards import (
    admin_kb,
    cancel_kb,
    back_to_admin_kb
)
from states import CreatePokemonState
from utils import save_pokemon_image, add_custom_pokemon_to_json

router = Router(name="admin")

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
def admin_required(handler):
    async def wrapper(event: types.Message | types.CallbackQuery, *args, **kwargs):
        if event.from_user.id != ADMIN_ID:
            if isinstance(event, types.CallbackQuery):
                await event.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            else:
                await event.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        return await handler(event, *args, **kwargs)
    return wrapper

# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
@router.message(Command("admin"))
@admin_required
async def admin_panel(message: Message):
    await message.answer(
        "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
        reply_markup=admin_kb()
    )

# –†–∞–∑–¥–µ–ª —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∫–µ–º–æ–Ω–∞
@router.callback_query(F.data == "create_pokemon"))
@admin_required
async def start_pokemon_creation(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üéÆ –†–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∫–µ–º–æ–Ω–∞:\n"
        "–ü—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–∫–µ–º–æ–Ω–∞",
        reply_markup=cancel_kb()
    )
    await state.set_state(CreatePokemonState.waiting_for_image)

@router.message(CreatePokemonState.waiting_for_image, F.photo)
@admin_required
async def process_pokemon_image(message: Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    await state.update_data(image=photo_id)
    
    await message.answer(
        "üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∫–µ–º–æ–Ω–∞:",
        reply_markup=cancel_kb()
    )
    await state.set_state(CreatePokemonState.waiting_for_name)

@router.message(CreatePokemonState.waiting_for_name)
@admin_required
async def process_pokemon_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    
    await message.answer(
        "‚öîÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (HP –ê—Ç–∞–∫–∞ –ó–∞—â–∏—Ç–∞):\n"
        "–ü—Ä–∏–º–µ—Ä: 100 50 30",
        reply_markup=cancel_kb()
    )
    await state.set_state(CreatePokemonState.waiting_for_stats)

@router.message(CreatePokemonState.waiting_for_stats)
@admin_required
async def process_pokemon_stats(message: Message, state: FSMContext):
    try:
        hp, attack, defense = map(int, message.text.split())
        data = await state.get_data()
        
        pokemon_data = {
            "id": f"custom_{data['name'].lower()}",
            "name": data['name'],
            "hp": hp,
            "attack": attack,
            "defense": defense,
            "image": data['image']
        }
        
        add_custom_pokemon_to_json(pokemon_data)
        await save_pokemon_image(data['image'], f"{data['name']}.jpg")
        
        await message.answer(
            f"‚úÖ –ü–æ–∫–µ–º–æ–Ω {data['name']} —Å–æ–∑–¥–∞–Ω!\n"
            f"HP: {hp} ‚öîÔ∏è ATK: {attack} üõ° DEF: {defense}",
            reply_markup=back_to_admin_kb()
        )
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ù—É–∂–Ω–æ 3 —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")

# –í—ã–¥–∞—á–∞ –ø–æ–∫–µ–º–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@router.callback_query(F.data == "give_pokemon"))
@admin_required
async def ask_for_pokemon_data(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üë§ –í–≤–µ–¥–∏—Ç–µ @username –∏ ID –ø–æ–∫–µ–º–æ–Ω–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n"
        "–ü—Ä–∏–º–µ—Ä: @username pikachu\n"
        "–î–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö: @username custom_–∏–º—è",
        reply_markup=cancel_kb()
    )
    await state.set_state("waiting_for_pokemon_gift")

@router.message(F.text.regexp(r'^@\w+\s.+$'), state="waiting_for_pokemon_gift")
@admin_required
async def process_pokemon_gift(message: Message, state: FSMContext):
    username = message.text.split()[0][1:]
    pokemon_id = message.text.split()[1]
    
    user = await get_user_by_username(username)
    if not user:
        return await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    success = await add_pokemon_to_user(user['id'], pokemon_id)
    if success:
        await message.answer(
            f"‚úÖ –ü–æ–∫–µ–º–æ–Ω {pokemon_id} –≤—ã–¥–∞–Ω @{username}",
            reply_markup=back_to_admin_kb()
        )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞: –≤–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–∫–æ–≥–æ –ø–æ–∫–µ–º–æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            reply_markup=back_to_admin_kb()
        )
    await state.clear()

# –í—ã–¥–∞—á–∞ –º–æ–Ω–µ—Ç
@router.callback_query(F.data == "give_coins"))
@admin_required
async def ask_for_coins_data(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üí∞ –í–≤–µ–¥–∏—Ç–µ @username –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n"
        "–ü—Ä–∏–º–µ—Ä: @username 500",
        reply_markup=cancel_kb()
    )
    await state.set_state("waiting_for_coins_gift")

@router.message(F.text.regexp(r'^@\w+\s\d+$'), state="waiting_for_coins_gift")
@admin_required
async def process_coins_gift(message: Message, state: FSMContext):
    username = message.text.split()[0][1:]
    amount = int(message.text.split()[1])
    
    user = await get_user_by_username(username)
    if not user:
        return await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    await give_user_coins(user['id'], amount)
    await message.answer(
        f"‚úÖ @{username} –ø–æ–ª—É—á–∏–ª {amount} –º–æ–Ω–µ—Ç",
        reply_markup=back_to_admin_kb()
    )
    await state.clear()

# –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π
@router.callback_query(F.data == "cancel_action"))
@admin_required
async def cancel_action(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=admin_kb()
    )